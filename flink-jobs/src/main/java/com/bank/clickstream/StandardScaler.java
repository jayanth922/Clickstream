package com.bank.clickstream;

import java.io.Serializable;

public class StandardScaler implements Serializable {
    // Your exact scaler parameters from the model artifacts
    private static final float[] MEANS = {
            8689.052167013786f, 16597308.277458098f, 10.761854110879698f, 609.5361008628385f,
            231.37130665476545f, 19.221296241198058f, 63.53224522047419f, 77.33448893851943f,
            974.2384538331846f, 43.15323911534266f, 340.48780949980863f, 376.21607912381876f,
            1399374.9547844238f, 47227.0587095069f, 1446494.505382718f, 3280272.338091009f,
            10304639.213672519f, 169751.60313745908f, 16258052.576984033f, 2920651.110117461f,
            3670273.509170604f, 10148409.682661906f, 1136181.5511727661f, 11114804.234260637f,
            2030855.1821837707f, 1670402.3188223485f, 5264953.967778439f, 1087845.3555876226f,
            -34831.38879797679f, -2591.9069567589013f, 40808.41482644931f, 6498.646527809006f,
            16.827277595953586f, 1063.0635832589508f, 190.5952517625845f, 329.98240151197524f,
            545012.8516209299f, 0.03207775463651691f, 0.2977114945948626f, 0.31186303679460475f,
            212.35602201957437f, 609.5213919468412f, 7266.7838936824355f, 2231.265810770604f,
            6.262323713180601f, -3202.0918838639295f, 91790.59588807708f, 172163.15410691264f,
            65683.88400823167f, 9342584.356650768f, 9768383.411415253f, 8898852.464385599f
    };

    private static final float[] SCALES = {
            19010.376992049456f, 35236624.52081067f, 849.1322036679996f, 10894.937311310225f,
            756.9868638009714f, 61.05588314253914f, 195.73162075194148f, 296.83454719314057f,
            2036.4337001942754f, 70.90742160472638f, 632.29094180864f, 880.2308754810773f,
            26299831.285405077f, 202423.14703624093f, 4679301.054615396f, 8459445.193997132f,
            25691216.070817526f, 3005918.8416812452f, 35170700.055525474f, 10019910.533876188f,
            10142745.379341973f, 25772530.990048345f, 9063215.722722372f, 30234263.98368817f,
            9404498.286608748f, 6635106.603072663f, 18109951.143324655f, 8805973.446530607f,
            24885567.32103977f, 1542106.3376589427f, 193179.0661797171f, 37833.028659381795f,
            25.529648447893962f, 2120.0784396052327f, 318.2759546398059f, 660.4201696304931f,
            1735096.143033614f, 0.17620661819011318f, 0.4572519661859922f, 0.4632542315790022f,
            345.3755807288352f, 10877.52835949104f, 14599.981111059698f, 8930.964601045935f,
            711.6881278440771f, 1164532.808227276f, 683881.2341816695f, 1079997.7622263255f,
            610376.6308804388f, 24856124.154962275f, 25623406.887789164f, 24590423.466968883f
    };

    public float[] transform(float[] features) {
        if (features.length != 52) {
            throw new IllegalArgumentException("Expected 52 features, got " + features.length);
        }

        float[] scaled = new float[52];
        for (int i = 0; i < 52; i++) {
            scaled[i] = (features[i] - MEANS[i]) / SCALES[i];
        }
        return scaled;
    }
}