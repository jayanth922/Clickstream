networks:
  clickstream-net:
    name: clickstream-net
    driver: bridge

volumes:
  zookeeper-data:
  kafka-data:
  redis-data:
  airflow-db:
  prometheus-data:
  grafana-data:

services:

  zookeeper:
    image: bitnami/zookeeper:3.7.1
    container_name: zookeeper
    restart: unless-stopped
    networks:
      - clickstream-net
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.3.2
    container_name: kafka
    restart: unless-stopped
    networks:
      - clickstream-net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2.13-alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - clickstream-net
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  flink-jobmanager:
    image: flink:1.16.0
    container_name: flink-jobmanager
    restart: unless-stopped
    networks:
      - clickstream-net
    ports:
      - "8081:8081"   # Flink UI
      - "9450:9450"   # Prometheus metrics
    depends_on:
      - kafka
    command: ["jobmanager"]
    environment:
      FLINK_PROPERTIES: |
        jobmanager.memory.process.size: 1600m
        taskmanager.memory.process.size: 1728m
        parallelism.default: 2
        metrics.reporters: prom
        metrics.reporter.prom.class: org.apache.flink.metrics.prometheus.PrometheusReporter
        metrics.reporter.prom.port: 9450
        metrics.reporter.prom.host: 0.0.0.0
        metrics.reporter.prom.interval: 10 SECONDS
    volumes:
      - ./flink-jobs/lib:/opt/flink/usrlib:ro
      - ./models:/opt/flink/models:ro
      - ./flink-conf.yaml:/opt/flink/conf/flink-conf.yaml:ro

  flink-taskmanager:
    image: flink:1.16.0
    container_name: flink-taskmanager
    restart: unless-stopped
    networks:
      - clickstream-net
    depends_on:
      - flink-jobmanager
    command: ["taskmanager"]
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.memory.process.size: 1728m
        taskmanager.numberOfTaskSlots: 2
        metrics.reporters: prom
        metrics.reporter.prom.class: org.apache.flink.metrics.prometheus.PrometheusReporter
        metrics.reporter.prom.port: 9450
        metrics.reporter.prom.host: 0.0.0.0
        metrics.reporter.prom.interval: 10 SECONDS
    volumes:
      - ./flink-jobs/lib:/opt/flink/usrlib:ro
      - ./models:/opt/flink/models:ro
      - ./flink-conf.yaml:/opt/flink/conf/flink-conf.yaml:ro

  prometheus:
    image: prom/prometheus:v2.41.0
    container_name: prometheus
    restart: unless-stopped
    networks:
      - clickstream-net
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:9.5.0
    container_name: grafana
    restart: unless-stopped
    networks:
      - clickstream-net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    networks:
      - clickstream-net
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'

  # Network Flow Data Generator (simulate network traffic)
  network-flow-generator:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: network-flow-generator
    restart: unless-stopped
    networks:
      - clickstream-net
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - FLOW_RATE=50
      - ATTACK_RATIO=0.15
    volumes:
      - ./scripts:/app/scripts